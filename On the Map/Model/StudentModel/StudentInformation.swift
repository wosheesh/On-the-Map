//
//  StudentInformation.swift
//  On the Map
//
//  Created by Wojtek Materka on 22/01/2016.
//  Copyright Â© 2016 Wojtek Materka. All rights reserved.
//

import Foundation

struct StudentInformation {
    
    // MARK: Properties
    
    var studentLocation : [String : AnyObject] = [
        ParseClient.JSONResponseKeys.ObjectId : "",
        ParseClient.JSONResponseKeys.UniqueKey : "",
        ParseClient.JSONResponseKeys.FirstName : "",
        ParseClient.JSONResponseKeys.LastName : "",
        ParseClient.JSONResponseKeys.MapString : "",
        ParseClient.JSONResponseKeys.MediaURL : "",
        ParseClient.JSONResponseKeys.Latitude : 0.0 as Float,
        ParseClient.JSONResponseKeys.Longitude : 0.0 as Float
    ]
    
//    var objectId: String // an auto-generated id/key generated by Parse which uniquely identifies a StudentLocation
//    var uniqueKey: String // an extra (optional) key used to uniquely identify a StudentLocation; populated by the Udacity userID
//    var firstName: String // the first name of the student which matches their Udacity profile first name
//    var lastName: String // the last name of the student which matches their Udacity profile last name
//    var mapString: String // the location string used for geocoding the student location
//    var mediaURL: String // the URL provided by the student
//    var latitude: Float // the latitude of the student location (ranges from -90 to 90)
//    var longitude: Float // the longitude of the student location (ranges from -180 to 180)
    

    
    // MARK: Initialisers
    
    init(dictionary: [String : AnyObject]) {
//        objectId = dictionary[ParseClient.JSONResponseKeys.ObjectId] as! String
//        uniqueKey = dictionary[ParseClient.JSONResponseKeys.UniqueKey] as! String
//        firstName = dictionary[ParseClient.JSONResponseKeys.FirstName] as! String
//        lastName = dictionary[ParseClient.JSONResponseKeys.LastName] as! String
//        mapString =  dictionary[ParseClient.JSONResponseKeys.MapString] as! String
//        mediaURL = dictionary[ParseClient.JSONResponseKeys.MediaURL] as! String
//        latitude = dictionary[ParseClient.JSONResponseKeys.Latitude] as! Float
//        longitude = dictionary[ParseClient.JSONResponseKeys.Longitude] as! Float
        
        for (key, value) in dictionary {
            if studentLocation[key] != nil {
                studentLocation.updateValue(value, forKey: key)
            }
        }
        
    }
    
    /* Helper: Given an array of dictionaries, convert them to an array of StudentInformation Objects */
    static func StudentInformationFromResults(results: [[String: AnyObject]]) -> [StudentInformation] {
        var students = [StudentInformation]()
        
        for result in results {
            students.append(StudentInformation(dictionary: result))
        }
        
        return students
    }

}